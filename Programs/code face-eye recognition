import cv2
from git.Programs.functions.facerec_test import SimpleFacerec
import time

face_cascade = cv2.CascadeClassifier(r'./xml/haarcascade_frontalface_default.xml')
#eye_cascade = cv2.CascadeClassifier(r'./xml/haarcascade_eye.xml')

cap = cv2.VideoCapture(0)
faces = None
previous = None

def distance(point_one, point_two):
    [x1, y1, w1, h1] = point_one
    [x2, y2, w2, h2] = point_two
    dist = ((x2 - x1)**2 + (y2 - y1)**2)**1/2
    return dist


def closest(point, new_points):
    distmat = []
    for new_point in new_points:
        distmat.append(distance(point, new_point))
    index = 0
    minimum = distmat[0]
    for i in range(len(distmat)):
        if minimum > distmat[i]:
            minimum = distmat[i]
            index = i
    return index



sfr = SimpleFacerec()
sfr.load_encoding_images("images/")


ctime = 0
ptime = 0



people = []  # [([x, y, w, h], "name")] van laatste frame


def benadering_gekende_gezichten_vorige_frame(coords, people):
    # print(coords, people)
    benadering_ok = False
    (x, y, w, h) = coords
    name = "unknown"   # bij elk gezicht standaard uitgaan van onbekend persoon


    for i in range(len(people)):
        (prev_coords, prev_name) = people[i]
        # print(prev_coords, prev_name)
        (x2, y2, w2, h2) = prev_coords
        if -20 < x - x2 < 20 and -20 < y - y2 < 20:
            benadering_ok = True
            name = prev_name
            people_index = i
            return (benadering_ok, name, people_index)
    return (benadering_ok, name, None)


while True:
    ret, img = cap.read()
    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    if faces is not None:
        previous = faces
    faces = face_cascade.detectMultiScale(gray_img, 1.25, 4)
    # print(faces)
    """
    for (x, y, w, h) in faces:
        cv2.rectangle(img, (x, y), (x + w, y + h), (255, 255, 0), 2)
        rec_gray = gray_img[y:y + h, x:x + w]
        rec_color = img[y:y + h, x:x + w]

        zoomed = img[y:y + h, x:x + w]
        start = True
        #eyes = eye_cascade.detectMultiScale(rec_gray)

        #for (a, b, c, d) in eyes:
        #    cv2.rectangle(rec_color, (a, b), (a+c, b+d), (0, 127, 255), 2)
    
    """
    print(faces)
    for i in range(len(faces)):
        # benaderings alg toepassen op faces en alle personen in people
        # face_name = sfr.detect_known_faces(img, coords)
        # print(face_name)

        # print(i)

    zoomed = []



    for i in range(len(faces)):
        if previous is not None:
            index = closest(faces[i],previous)

        (x, y, w, h) = faces[i]

        # benadering van gezichten is ok, en dus naam gelinkt kan worden, dan doen

        (gekend_gezicht, name, people_index) = benadering_gekende_gezichten_vorige_frame(faces[i], people)
        # print(gekend_gezicht, name, people_index)

        # if gekend_gezicht:
        #     people[people_index] = (faces[i], name)
        #
        # else:
        #     name = sfr.detect_known_faces(img, faces[i])

        if people_index is not None:
            people[people_index] = (faces[i], name)



        cv2.putText(img, name, (x, y - 10), cv2.FONT_HERSHEY_DUPLEX, 1, (0, 0, 200), 2)
        # # cv2.rectangle(img, (x, y), (x, y), (0, 0, 200), 4)
        cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 2)


    # buiten loop
    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # HIER LOOPT HET NOG FOUT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    unknown_people = []
    # print(unknown_people)
    print(people)
    for j in range(len(faces)):
        (coords, name) = people[j]
        if name == "unknown":
            unknown_people.append((coords, name, j))

    print(unknown_people)

    new_people = sfr.detect_known_faces(img, unknown_people)
    # print(new_people)






    zoomed = []

    # for i in range(len(faces)):
    #     (x, y, w, h) = faces[i]
    #     zoomed.append([])
    #     print(faces)
    #
    #
    #     # cv2.putText(img, name, (x, y - 10), cv2.FONT_HERSHEY_DUPLEX, 1, (0, 0, 200), 2)
    #
    #
    #
    #
    #     cv2.rectangle(img, (x, y), (x + w, y + h), (255, 255, 0), 2)
    #     rec_gray = gray_img[y:y + h, x:x + w]
    #     rec_color = img[y:y + h, x:x + w]
    #     h2 = 75
    #     w2 = 75
    #     if y < h2:
    #         h2 = y
    #     if x + w2 + w > len(gray_img[0]):
    #         w2 = len(gray_img[0]) - w - x
    #     if x < w2:
    #         w2 = x
    #     if y + h + h2 > len(gray_img):
    #         h2 = len(gray_img) - y - h
    #     zoomed[i] = img[y-h2:y + h +h2, x -w2:x + w +w2]
    #     #print(len(gray_img))
    #     #print(len(gray_img[0]))
    #     cv2.imshow('Zoom in ' + str(i + 1), zoomed[i])
    #     cv2.resizeWindow('Zoom in ' + str(i + 1), 325, 325)




    ctime = time.time()
    fps = 1 / (ctime - ptime)
    ptime = ctime

    cv2.putText(img, f'FPS:{str(int(fps))}', (7, 70), cv2.FONT_HERSHEY_SIMPLEX, 3, (100, 255, 0), 3, cv2.LINE_AA)





    print(faces)
    cv2.imshow('Face Recognition', img)
    #if start and zoomed.all() is not None:
    #    cv2.imshow('Zoom in', zoomed)



    k = cv2.waitKey(30) & 0xff
    if k == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()



